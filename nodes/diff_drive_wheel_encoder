#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy
import tf
from std_msgs.msg import Int32
from math import sqrt,atan2,cos,sin,pi
import time
from  Encoder import Encoder as _encoder
import atexit
from gpiozero import RotaryEncoder

PPM = 13610

PPR = 1361

MPM = 1.7

class Wheel():
    def __init__(self) -> None:
        self.left_wheel_encoder = RotaryEncoder(5, 6)
        self.right_wheel_encoder = RotaryEncoder(19, 16)
        atexit.register(self.close)
        # rospy.init_node('diff_wheel_encoder')

    def wheel_encoder_publisher(self):
        rate = rospy.Rate(10)
        left_wheel_pub = rospy.Publisher('lwheel_ticks', Int32, queue_size=10)
        right_wheel_pub = rospy.Publisher('rwheel_ticks', Int32, queue_size=10)
        rospy.init_node('wheel_encoder_publisher', anonymous=True)
        rospy.loginfo("waiting for Encoders...")
        while not rospy.is_shutdown():
        # Pausing for `tsample` to give CPU time to process encoder signal
            #time.sleep(0.002)
            # rospy.loginfo("L E {} R E {}".format(left_wheel_encoder.read(), right_wheel_encoder.read()))
            left_wheel_pub.publish(Int32(int(360 / 340 * self.left_wheel_encoder.steps)))
            right_wheel_pub.publish(Int32(int(360 / 340 * self.right_wheel_encoder.steps)))
            # rate.sleep()

    def close(self):
        self.left_wheel_encoder.close()
        self.right_wheel_encoder.close()
       
if __name__ == '__main__':
    wheels = Wheel()
    try:
        wheels.wheel_encoder_publisher()
    except rospy.ROSInterruptException:
        pass
